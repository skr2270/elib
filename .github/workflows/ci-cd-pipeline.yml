name: Deploy Backend to EC2

on:
  push:
    branches:
      - backend

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Cache Docker layers (optional but improves build speed)
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # Step 4: Set up AWS CLI with credentials from GitHub Secrets
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 5: Build and push Docker image to AWS ECR
    - name: Build and push Docker image
      run: |
        docker build -t my-app-backend .
        docker tag my-app-backend:latest ${{ secrets.AWS_ECR_URL }}:latest
        docker push ${{ secrets.AWS_ECR_URL }}:latest

    # Step 6: SSH into EC2 and deploy the Docker image
    - name: SSH to EC2 and deploy
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_IP_ADDRESS }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          # Stop any existing backend containers
          docker stop backend || true
          docker rm backend || true

          # Pull the latest Docker image from ECR
          docker pull ${{ secrets.AWS_ECR_URL }}:latest

          # Run the Docker container with port mapping
          docker run -d -p 3000:3000 --name backend ${{ secrets.AWS_ECR_URL }}:latest
